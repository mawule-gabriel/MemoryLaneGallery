name: Build and Deploy MemoryLane

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: memory-lane
  ECS_CLUSTER: MemoryLane-Cluster
  ECS_SERVICE: MemoryLane-Service
  TASK_DEFINITION: MemoryLane-Task
  CONTAINER_NAME: memory-lane
  CONTAINER_PORT: 5000

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
        
    - name: Build with Maven
      run: mvn clean package -DskipTests
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Mask Docker password
      run: |
        echo "::add-mask::${{ steps.login-ecr.outputs.password }}"
        
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        # Tag with latest for convenience
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        # Push both tags to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        # Save the image URI for later use
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
    - name: Download current task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json
        
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
        
    - name: Register new task definition revision
      id: register-task-def
      run: |
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://${{ steps.task-def.outputs.task-definition }} \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        echo "task_definition_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT
        
    - name: Generate AppSpec content
      id: appspec
      run: |
        APPSPEC_CONTENT='{
          "version": 1,
          "Resources": [
            {
              "TargetService": {
                "Type": "AWS::ECS::Service",
                "Properties": {
                  "TaskDefinition": "${{ steps.register-task-def.outputs.task_definition_arn }}",
                  "LoadBalancerInfo": {
                    "ContainerName": "${{ env.CONTAINER_NAME }}",
                    "ContainerPort": ${{ env.CONTAINER_PORT }}
                  }
                }
              }
            }
          ]
        }'
        # Store AppSpec content in a file
        echo "$APPSPEC_CONTENT" > appspec.json
        # Calculate SHA256 of the content
        APPSPEC_SHA256=$(sha256sum appspec.json | cut -d' ' -f1)
        echo "appspec_content=$APPSPEC_CONTENT" >> $GITHUB_OUTPUT
        echo "appspec_sha256=$APPSPEC_SHA256" >> $GITHUB_OUTPUT
        
    - name: Create CodeDeploy deployment
      id: deploy
      run: |
        DEPLOYMENT_ID=$(aws deploy create-deployment \
          --application-name MemoryLane-Application \
          --deployment-group-name MemoryLane-DeploymentGroup \
          --revision '{
            "revisionType": "AppSpecContent",
            "appSpecContent": {
              "content": ${{ toJSON(steps.appspec.outputs.appspec_content) }},
              "sha256": "${{ steps.appspec.outputs.appspec_sha256 }}"
            }
          }' \
          --query 'deploymentId' \
          --output text)
          
        echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
        echo "Started deployment $DEPLOYMENT_ID"
        
    - name: Wait for deployment to complete
      run: |
        echo "Waiting for deployment ${{ steps.deploy.outputs.deployment_id }} to complete..."
        
        while true; do
          STATUS=$(aws deploy get-deployment \
            --deployment-id ${{ steps.deploy.outputs.deployment_id }} \
            --query 'deploymentInfo.status' \
            --output text)
            
          echo "Deployment status: $STATUS"
          
          if [ "$STATUS" == "Succeeded" ]; then
            echo "Deployment succeeded!"
            break
          elif [ "$STATUS" == "Failed" ] || [ "$STATUS" == "Stopped" ]; then
            echo "Deployment $STATUS!"
            exit 1
          fi
          
          echo "Waiting for deployment to complete..."
          sleep 30
        done
        
    - name: Get Application URL
      if: success()
      run: |
        ALB_DNS=$(aws cloudformation describe-stacks \
          --stack-name ECScluster1 \
          --query "Stacks[0].Outputs[?OutputKey=='LoadBalancerDNS'].OutputValue" \
          --output text)
          
        echo "=================================================================="
        echo "‚úÖ Deployment completed successfully!"
        echo "üåê Application is available at: http://$ALB_DNS"
        echo "=================================================================="
