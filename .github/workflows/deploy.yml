name: Build, Push to ECR, and Deploy to ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: memory-lane
  ECS_CLUSTER: MemoryLane-Cluster
  ECS_SERVICE: MemoryLane-Service
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: memory-lane
  CONTAINER_PORT: 5000

jobs:
  build-push-deploy:
    name: Build and Push to ECR and then Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configure AWS Credentials for ECR
      - name: Configure AWS Credentials for ECR
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Build the Docker image
      - name: Build Docker Image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest .

      # Tag and push the image to Amazon ECR
      - name: Tag and Push Image to ECR
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "::set-output name=image::${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG"

      # Reconfigure AWS credentials for ECS deployment (same region as before)
      - name: Configure AWS Credentials for ECS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Fill in the new image ID in the Amazon ECS task definition
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.tag-and-push-image.outputs.image }}  # Use the output image URI

      # Register the new task definition
      - name: Register the new task definition
        run: |
          aws ecs register-task-definition --cli-input-json file://${{ steps.task-def.outputs.task-definition }}

      # Start CodeDeploy deployment
      - name: Start CodeDeploy deployment
        run: |
          sha256=$(openssl dgst -sha256 -binary .aws/appspec.yaml | openssl enc -base64 -A)
          aws deploy create-deployment \
            --application-name MemoryLane-Application \
            --deployment-group-name MemoryLane-DeploymentGroup \
            --revision '{
              "revisionType": "AppSpecContent",
              "appSpecContent": {
                "content": "'$(cat appspec.yaml | base64 -w 0)'",
                "sha256": "'$sha256'"
              }
            }' \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --description "Deployment triggered by GitHub Actions"

      # Wait for deployment to complete
      - name: Wait for deployment to complete
        run: |
          echo "Waiting for deployment to complete..."
          
          while true; do
            STATUS=$(aws deploy get-deployment \
              --deployment-id ${{ steps.deploy.outputs.deployment_id }} \
              --query 'deploymentInfo.status' \
              --output text)
              
            echo "Deployment status: $STATUS"
            
            if [ "$STATUS" == "Succeeded" ]; then
              echo "Deployment succeeded!"
              break
            elif [ "$STATUS" == "Failed" ] || [ "$STATUS" == "Stopped" ]; then
              echo "Deployment $STATUS!"
              exit 1
            fi
            
            echo "Waiting for deployment to complete..."
            sleep 30
          done

      # Get Application URL after deployment
      - name: Get Application URL
        if: success()
        run: |
          ALB_DNS=$(aws cloudformation describe-stacks \
            --stack-name ECScluster1 \
            --query "Stacks[0].Outputs[?OutputKey=='LoadBalancerDNS'].OutputValue" \
            --output text)
          
          echo "=================================================================="
          echo "‚úÖ Deployment completed successfully!"
          echo "üåê Application is available at: http://$ALB_DNS"
          echo "=================================================================="
